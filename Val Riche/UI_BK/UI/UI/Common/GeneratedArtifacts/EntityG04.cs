

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    public sealed partial class Schedule_Device : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the Schedule_Device entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Schedule_Device()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Schedule_Device(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Schedule_Device> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.Schedule_Device.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Id
        {
            get
            {
                return global::LightSwitchApplication.Schedule_Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Id);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Id_Device
        {
            get
            {
                return global::LightSwitchApplication.Schedule_Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Id_Device);
            }
            set
            {
                global::LightSwitchApplication.Schedule_Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Id_Device, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Device_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Device_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Device_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Schedule_Unit Schedule_Unit
        {
            get
            {
                return global::LightSwitchApplication.Schedule_Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Schedule_Unit);
            }
            set
            {
                global::LightSwitchApplication.Schedule_Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Schedule_Unit, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Configuration_Device Configuration_Device
        {
            get
            {
                return global::LightSwitchApplication.Schedule_Device.DetailsClass.GetValue(this, global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Configuration_Device);
            }
            set
            {
                global::LightSwitchApplication.Schedule_Device.DetailsClass.SetValue(this, global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Configuration_Device, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Device_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Device_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Device_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.Schedule_Device,
                global::LightSwitchApplication.Schedule_Device.DetailsClass,
                global::LightSwitchApplication.Schedule_Device.DetailsClass.IImplementation,
                global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Id;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass>.Entry
                __Schedule_DeviceEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass>.Entry(
                    global::LightSwitchApplication.Schedule_Device.DetailsClass.__Schedule_Device_CreateNew,
                    global::LightSwitchApplication.Schedule_Device.DetailsClass.__Schedule_Device_Created,
                    global::LightSwitchApplication.Schedule_Device.DetailsClass.__Schedule_Device_AllowSaveWithErrors);
            private static global::LightSwitchApplication.Schedule_Device __Schedule_Device_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Schedule_Device> es)
            {
                return new global::LightSwitchApplication.Schedule_Device(es);
            }
            private static void __Schedule_Device_Created(global::LightSwitchApplication.Schedule_Device e)
            {
                e.Schedule_Device_Created();
            }
            private static bool __Schedule_Device_AllowSaveWithErrors(global::LightSwitchApplication.Schedule_Device e)
            {
                bool result = false;
                e.Schedule_Device_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int> Id
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Id) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int> Id_Device
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Id_Device) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Schedule_Unit> Schedule_Unit
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Schedule_Unit) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Schedule_Unit>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityVirtualReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Configuration_Device> Configuration_Device
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Configuration_Device) as global::Microsoft.LightSwitch.Details.Framework.EntityVirtualReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Configuration_Device>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int Id { get; }
                new int Id_Device { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Schedule_Unit { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int>.Entry
                    Id = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int>.Entry(
                        "Id",
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_Stub,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_ComputeIsReadOnly,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_Validate,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_GetImplementationValue,
                        null,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_OnValueChanged);
                private static void _Id_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Schedule_Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int>.Data> c, global::LightSwitchApplication.Schedule_Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Id, sf);
                }
                private static bool _Id_ComputeIsReadOnly(global::LightSwitchApplication.Schedule_Device e)
                {
                    bool result = false;
                    e.Id_IsReadOnly(ref result);
                    return result;
                }
                private static void _Id_Validate(global::LightSwitchApplication.Schedule_Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Id_Validate(r);
                }
                private static int _Id_GetImplementationValue(global::LightSwitchApplication.Schedule_Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Id;
                }
                private static void _Id_OnValueChanged(global::LightSwitchApplication.Schedule_Device e)
                {
                    e.Id_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int>.Entry
                    Id_Device = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int>.Entry(
                        "Id_Device",
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_Device_Stub,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_Device_ComputeIsReadOnly,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_Device_Validate,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_Device_GetImplementationValue,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_Device_SetImplementationValue,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Id_Device_OnValueChanged);
                private static void _Id_Device_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Schedule_Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int>.Data> c, global::LightSwitchApplication.Schedule_Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Id_Device, sf);
                }
                private static bool _Id_Device_ComputeIsReadOnly(global::LightSwitchApplication.Schedule_Device e)
                {
                    bool result = false;
                    e.Id_Device_IsReadOnly(ref result);
                    return result;
                }
                private static void _Id_Device_Validate(global::LightSwitchApplication.Schedule_Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Id_Device_Validate(r);
                }
                private static int _Id_Device_GetImplementationValue(global::LightSwitchApplication.Schedule_Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Id_Device;
                }
                private static void _Id_Device_SetImplementationValue(global::LightSwitchApplication.Schedule_Device.DetailsClass d, int v)
                {
                    d.ImplementationEntity.Id_Device = v;
                }
                private static void _Id_Device_OnValueChanged(global::LightSwitchApplication.Schedule_Device e)
                {
                    e.Id_Device_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Schedule_Unit>.Entry
                    Schedule_Unit = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Schedule_Unit>.Entry(
                        "Schedule_Unit",
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Schedule_Unit_Stub,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Schedule_Unit_ComputeIsReadOnly,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Schedule_Unit_Validate,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Schedule_Unit_GetCoreImplementationValue,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Schedule_Unit_GetImplementationValue,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Schedule_Unit_SetImplementationValue,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Schedule_Unit_Refresh,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Schedule_Unit_OnValueChanged);
                private static void _Schedule_Unit_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Schedule_Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Schedule_Unit>.Data> c, global::LightSwitchApplication.Schedule_Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Schedule_Unit, sf);
                }
                private static bool _Schedule_Unit_ComputeIsReadOnly(global::LightSwitchApplication.Schedule_Device e)
                {
                    bool result = false;
                    e.Schedule_Unit_IsReadOnly(ref result);
                    return result;
                }
                private static void _Schedule_Unit_Validate(global::LightSwitchApplication.Schedule_Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Schedule_Unit_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Schedule_Unit_GetCoreImplementationValue(global::LightSwitchApplication.Schedule_Device.DetailsClass d)
                {
                    return d.ImplementationEntity.Schedule_Unit;
                }
                private static global::LightSwitchApplication.Schedule_Unit _Schedule_Unit_GetImplementationValue(global::LightSwitchApplication.Schedule_Device.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Schedule_Unit, global::LightSwitchApplication.Schedule_Unit.DetailsClass>(global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Schedule_Unit, ref d._Schedule_Unit);
                }
                private static void _Schedule_Unit_SetImplementationValue(global::LightSwitchApplication.Schedule_Device.DetailsClass d, global::LightSwitchApplication.Schedule_Unit v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Schedule_Unit, ref d._Schedule_Unit, (i, ev) => i.Schedule_Unit = ev, v);
                }
                private static void _Schedule_Unit_Refresh(global::LightSwitchApplication.Schedule_Device.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties.Schedule_Unit, ref d._Schedule_Unit);
                }
                private static void _Schedule_Unit_OnValueChanged(global::LightSwitchApplication.Schedule_Device e)
                {
                    e.Schedule_Unit_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityVirtualReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Configuration_Device>.Entry
                    Configuration_Device = new global::Microsoft.LightSwitch.Details.Framework.EntityVirtualReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Configuration_Device>.Entry(
                        "Configuration_Device",
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Configuration_Device_Stub,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Configuration_Device_ComputeIsReadOnly,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Configuration_Device_Validate,
                        global::LightSwitchApplication.Schedule_Device.DetailsClass.PropertySetProperties._Configuration_Device_OnValueChanged);
                private static void _Configuration_Device_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Schedule_Device.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityVirtualReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Configuration_Device>.Data> c, global::LightSwitchApplication.Schedule_Device.DetailsClass d, object sf)
                {
                    c(d, ref d._Configuration_Device, sf);
                }
                private static bool _Configuration_Device_ComputeIsReadOnly(global::LightSwitchApplication.Schedule_Device e)
                {
                    bool result = false;
                    e.Configuration_Device_IsReadOnly(ref result);
                    return result;
                }
                private static void _Configuration_Device_Validate(global::LightSwitchApplication.Schedule_Device e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Configuration_Device_Validate(r);
                }
                private static void _Configuration_Device_OnValueChanged(global::LightSwitchApplication.Schedule_Device e)
                {
                    e.Configuration_Device_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int>.Data _Id;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, int>.Data _Id_Device;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Schedule_Unit>.Data _Schedule_Unit;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityVirtualReferenceProperty<global::LightSwitchApplication.Schedule_Device, global::LightSwitchApplication.Schedule_Device.DetailsClass, global::LightSwitchApplication.Configuration_Device>.Data _Configuration_Device;
            
        }
    
        #endregion
    }
    
    #endregion
}
