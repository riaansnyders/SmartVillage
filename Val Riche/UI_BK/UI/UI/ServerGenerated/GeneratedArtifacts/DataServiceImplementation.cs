//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class lfa_PowerMgmtData_ConfigurationDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::lfa_PowerMgmtData_Configuration.Implementation.lfa_PowerMgmtData_ConfigurationObjectContext>
    {
    
        public lfa_PowerMgmtData_ConfigurationDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region Configuration_Device
    
        public void InsertConfiguration_Device(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Configuration_Devices.AddObject(entity);
            }
        }
    
        public void UpdateConfiguration_Device(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Configuration_Devices, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteConfiguration_Device(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Configuration_Devices.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Configuration_Unit
    
        public void InsertConfiguration_Unit(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Configuration_Unit.AddObject(entity);
            }
        }
    
        public void UpdateConfiguration_Unit(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Configuration_Unit, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteConfiguration_Unit(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Configuration_Unit.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Configuration_Zone
    
        public void InsertConfiguration_Zone(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Configuration_Zones.AddObject(entity);
            }
        }
    
        public void UpdateConfiguration_Zone(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Configuration_Zones, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteConfiguration_Zone(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Configuration_Zones.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device> Configuration_Devices_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device>("Configuration_Devices_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device> Configuration_Devices_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device>("Configuration_Devices_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device> Configuration_Devices_All(string frameworkOperators)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device>("Configuration_Devices_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit> Configuration_Unit_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit>("Configuration_Unit_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit> Configuration_Unit_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit>("Configuration_Unit_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit> Configuration_Unit_All(string frameworkOperators)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit>("Configuration_Unit_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone> Configuration_Zones_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone>("Configuration_Zones_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone> Configuration_Zones_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone>("Configuration_Zones_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone> Configuration_Zones_All(string frameworkOperators)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone>("Configuration_Zones_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().lfa_PowerMgmtData_Configuration;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class lfa_PowerMgmtData_ConfigurationServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::lfa_PowerMgmtData_Configuration.Implementation.lfa_PowerMgmtData_ConfigurationObjectContext>
    {
        public lfa_PowerMgmtData_ConfigurationServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device> Configuration_Devices_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device>("Configuration_Devices_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device> Configuration_Devices_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device>("Configuration_Devices_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device> Configuration_Devices_All()
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device> query;
            query = base.CreateQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device>("[Configuration_Devices]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit> Configuration_Unit_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit>("Configuration_Unit_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit> Configuration_Unit_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit>("Configuration_Unit_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit> Configuration_Unit_All()
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit> query;
            query = base.CreateQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit>("[Configuration_Unit]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone> Configuration_Zones_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone>("Configuration_Zones_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone> Configuration_Zones_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone>("Configuration_Zones_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone> Configuration_Zones_All()
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone> query;
            query = base.CreateQuery<global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone>("[Configuration_Zones]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device))
            {
                return new global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device();
            }
            if (type == typeof(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit))
            {
                return new global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit();
            }
            if (type == typeof(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone))
            {
                return new global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::lfa_PowerMgmtData_Configuration.Implementation.lfa_PowerMgmtData_ConfigurationObjectContext CreateObjectContext()
        {
            return new global::lfa_PowerMgmtData_Configuration.Implementation.lfa_PowerMgmtData_ConfigurationObjectContext(base.GetEntityConnectionString(
                "lfa_PowerMgmtData_Configuration", 
                "res://*/lfa_PowerMgmtData_Configuration.csdl|res://*/lfa_PowerMgmtData_Configuration.ssdl|res://*/lfa_PowerMgmtData_Configuration.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Configuration_Device))
            {
                return new global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Configuration_Unit))
            {
                return new global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Configuration_Zone))
            {
                return new global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone();
            }
            return null;
        }
    
    #endregion
    
    }
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class lfa_PowerMgmtData_ScheduleDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::lfa_PowerMgmtData_Schedule.Implementation.lfa_PowerMgmtData_ScheduleObjectContext>
    {
    
        public lfa_PowerMgmtData_ScheduleDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region Schedule_Device
    
        public void InsertSchedule_Device(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Schedule_Device.AddObject(entity);
            }
        }
    
        public void UpdateSchedule_Device(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Schedule_Device, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteSchedule_Device(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Schedule_Device.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Schedule_Schedule
    
        public void InsertSchedule_Schedule(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Schedule_Schedule.AddObject(entity);
            }
        }
    
        public void UpdateSchedule_Schedule(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Schedule_Schedule, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteSchedule_Schedule(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Schedule_Schedule.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Schedule_Unit
    
        public void InsertSchedule_Unit(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Schedule_Unit.AddObject(entity);
            }
        }
    
        public void UpdateSchedule_Unit(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Schedule_Unit, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteSchedule_Unit(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Schedule_Unit.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device> Schedule_Device_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device>("Schedule_Device_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device> Schedule_Device_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device>("Schedule_Device_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device> Schedule_Device_All(string frameworkOperators)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device>("Schedule_Device_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule> Schedule_Schedule_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule>("Schedule_Schedule_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule> Schedule_Schedule_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule>("Schedule_Schedule_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule> Schedule_Schedule_All(string frameworkOperators)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule>("Schedule_Schedule_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit> Schedule_Unit_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit>("Schedule_Unit_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit> Schedule_Unit_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit>("Schedule_Unit_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit> Schedule_Unit_All(string frameworkOperators)
        {
            return this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit>("Schedule_Unit_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().lfa_PowerMgmtData_Schedule;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class lfa_PowerMgmtData_ScheduleServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::lfa_PowerMgmtData_Schedule.Implementation.lfa_PowerMgmtData_ScheduleObjectContext>
    {
        public lfa_PowerMgmtData_ScheduleServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device> Schedule_Device_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device>("Schedule_Device_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device> Schedule_Device_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device>("Schedule_Device_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device> Schedule_Device_All()
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device> query;
            query = base.CreateQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device>("[Schedule_Device]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule> Schedule_Schedule_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule>("Schedule_Schedule_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule> Schedule_Schedule_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule>("Schedule_Schedule_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule> Schedule_Schedule_All()
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule> query;
            query = base.CreateQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule>("[Schedule_Schedule]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit> Schedule_Unit_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit>("Schedule_Unit_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit> Schedule_Unit_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit>("Schedule_Unit_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit> Schedule_Unit_All()
        {
            global::System.Linq.IQueryable<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit> query;
            query = base.CreateQuery<global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit>("[Schedule_Unit]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device))
            {
                return new global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device();
            }
            if (type == typeof(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule))
            {
                return new global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule();
            }
            if (type == typeof(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit))
            {
                return new global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::lfa_PowerMgmtData_Schedule.Implementation.lfa_PowerMgmtData_ScheduleObjectContext CreateObjectContext()
        {
            return new global::lfa_PowerMgmtData_Schedule.Implementation.lfa_PowerMgmtData_ScheduleObjectContext(base.GetEntityConnectionString(
                "lfa_PowerMgmtData_Schedule", 
                "res://*/lfa_PowerMgmtData_Schedule.csdl|res://*/lfa_PowerMgmtData_Schedule.ssdl|res://*/lfa_PowerMgmtData_Schedule.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Schedule_Device))
            {
                return new global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Schedule_Schedule))
            {
                return new global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Schedule_Unit))
            {
                return new global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit();
            }
            return null;
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.lfa_PowerMgmtData_Configuration))
            {
                return new global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService();
            }
            if (dataServiceType == typeof(global::LightSwitchApplication.lfa_PowerMgmtData_Schedule))
            {
                return new global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.lfa_PowerMgmtData_Configuration))
            {
                return new global::LightSwitchApplication.Implementation.lfa_PowerMgmtData_ConfigurationServiceImplementation(dataService);
            }
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.lfa_PowerMgmtData_Schedule))
            {
                return new global::LightSwitchApplication.Implementation.lfa_PowerMgmtData_ScheduleServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.Configuration_Device) == definitionType)
            {
                return typeof(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device);
            }
            if (typeof(global::LightSwitchApplication.Configuration_Unit) == definitionType)
            {
                return typeof(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit);
            }
            if (typeof(global::LightSwitchApplication.Configuration_Zone) == definitionType)
            {
                return typeof(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone);
            }
            if (typeof(global::LightSwitchApplication.Schedule_Device) == definitionType)
            {
                return typeof(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device);
            }
            if (typeof(global::LightSwitchApplication.Schedule_Schedule) == definitionType)
            {
                return typeof(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule);
            }
            if (typeof(global::LightSwitchApplication.Schedule_Unit) == definitionType)
            {
                return typeof(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit);
            }
            return null;
        }
    }
}

namespace lfa_PowerMgmtData_Configuration.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Device.Metadata))]
    public partial class Configuration_Device :
        global::LightSwitchApplication.Configuration_Device.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Configuration_Device.DetailsClass.IImplementation.Configuration_Unit
        {
            get
            {
                return this.Configuration_Unit;
            }
            set
            {
                this.Configuration_Unit = (global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Configuration_Unit");
                }
            }
        }
        
        partial void OnId_UnitChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Configuration_Unit");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Configuration_Device.DetailsClass.IImplementation.Zone
        {
            get
            {
                return this.Zone;
            }
            set
            {
                this.Zone = (global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Zone");
                }
            }
        }
        
        partial void OnId_ZoneChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Zone");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit Configuration_Unit { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone Zone { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Unit.Metadata))]
    public partial class Configuration_Unit :
        global::LightSwitchApplication.Configuration_Unit.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Configuration_Unit.DetailsClass.IImplementation.Configuration_Device
        {
            get
            {
                return this.Configuration_Device;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Configuration_Unit.DetailsClass.IImplementation.Configuration_Zone
        {
            get
            {
                return this.Configuration_Zone;
            }
            set
            {
                this.Configuration_Zone = (global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Configuration_Zone");
                }
            }
        }
        
        partial void OnId_ZoneChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Configuration_Zone");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::lfa_PowerMgmtData_Configuration.Implementation.Configuration_Zone Configuration_Zone { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Configuration_Zone :
        global::LightSwitchApplication.Configuration_Zone.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Configuration_Zone.DetailsClass.IImplementation.Configuration_Unit
        {
            get
            {
                return this.Configuration_Unit;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Configuration_Zone.DetailsClass.IImplementation.Devices
        {
            get
            {
                return this.Devices;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

namespace lfa_PowerMgmtData_Schedule.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Device.Metadata))]
    public partial class Schedule_Device :
        global::LightSwitchApplication.Schedule_Device.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Schedule_Device.DetailsClass.IImplementation.Schedule_Unit
        {
            get
            {
                return this.Schedule_Unit;
            }
            set
            {
                this.Schedule_Unit = (global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Schedule_Unit");
                }
            }
        }
        
        partial void OnId_ScheduleUnitChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Schedule_Unit");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit Schedule_Unit { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Schedule_Schedule :
        global::LightSwitchApplication.Schedule_Schedule.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Schedule_Schedule.DetailsClass.IImplementation.Schedule_Unit
        {
            get
            {
                return this.Schedule_Unit;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Unit.Metadata))]
    public partial class Schedule_Unit :
        global::LightSwitchApplication.Schedule_Unit.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Schedule_Unit.DetailsClass.IImplementation.Schedule_Device
        {
            get
            {
                return this.Schedule_Device;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Schedule_Unit.DetailsClass.IImplementation.Schedule_Schedule
        {
            get
            {
                return this.Schedule_Schedule;
            }
            set
            {
                this.Schedule_Schedule = (global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Schedule_Schedule");
                }
            }
        }
        
        partial void OnId_ScheduleChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Schedule_Schedule");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::lfa_PowerMgmtData_Schedule.Implementation.Schedule_Schedule Schedule_Schedule { get; set; }
        
        }
    }
    
}

