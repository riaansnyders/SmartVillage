//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Provides members to query and update data in the lfa_PowerMgmtData_Configuration datasource.
    /// </summary>
    public sealed partial class lfa_PowerMgmtData_ConfigurationService
        : global::LightSwitchApplication.lfa_PowerMgmtData_Configuration
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public lfa_PowerMgmtData_ConfigurationService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Inserting(global::LightSwitchApplication.Configuration_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Inserted(global::LightSwitchApplication.Configuration_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Updating(global::LightSwitchApplication.Configuration_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Updated(global::LightSwitchApplication.Configuration_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Deleting(global::LightSwitchApplication.Configuration_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Deleted(global::LightSwitchApplication.Configuration_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Validate(global::LightSwitchApplication.Configuration_Device entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Inserting(global::LightSwitchApplication.Configuration_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Inserted(global::LightSwitchApplication.Configuration_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Updating(global::LightSwitchApplication.Configuration_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Updated(global::LightSwitchApplication.Configuration_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Deleting(global::LightSwitchApplication.Configuration_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Deleted(global::LightSwitchApplication.Configuration_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Validate(global::LightSwitchApplication.Configuration_Unit entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Inserting(global::LightSwitchApplication.Configuration_Zone entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Inserted(global::LightSwitchApplication.Configuration_Zone entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Updating(global::LightSwitchApplication.Configuration_Zone entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Updated(global::LightSwitchApplication.Configuration_Zone entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Deleting(global::LightSwitchApplication.Configuration_Zone entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Deleted(global::LightSwitchApplication.Configuration_Zone entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Validate(global::LightSwitchApplication.Configuration_Zone entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Device> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Device> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Device> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Device> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Device> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Device> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Devices_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Unit> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Unit> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Unit> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Unit> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Unit> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Unit> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Unit_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Zone> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Zone> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Zone> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Zone> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Zone> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Zone> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Configuration_Zones_All_ExecuteFailed(global::System.Exception exception);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Device>
                __Configuration_DevicesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Device>(
                    "Configuration_Devices",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_CanInsert,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_CanUpdate,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_CanDelete,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_CanRead,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Inserting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Inserted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Updating,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Updated,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Deleting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Deleted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Validate);
            private static bool __Configuration_Devices_CanInsert(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Devices_CanInsert(ref result);
                return result;
            }
            private static bool __Configuration_Devices_CanUpdate(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Devices_CanUpdate(ref result);
                return result;
            }
            private static bool __Configuration_Devices_CanDelete(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Devices_CanDelete(ref result);
                return result;
            }
            private static bool __Configuration_Devices_CanRead(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Devices_CanRead(ref result);
                return result;
            }
            private static void __Configuration_Devices_Inserting(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Device e)
            {
                d.Configuration_Devices_Inserting(e);
            }
            private static void __Configuration_Devices_Inserted(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Device e)
            {
                d.Configuration_Devices_Inserted(e);
            }
            private static void __Configuration_Devices_Updating(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Device e)
            {
                d.Configuration_Devices_Updating(e);
            }
            private static void __Configuration_Devices_Updated(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Device e)
            {
                d.Configuration_Devices_Updated(e);
            }
            private static void __Configuration_Devices_Deleting(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Device e)
            {
                d.Configuration_Devices_Deleting(e);
            }
            private static void __Configuration_Devices_Deleted(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Device e)
            {
                d.Configuration_Devices_Deleted(e);
            }
            private static void __Configuration_Devices_Validate(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Device e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Configuration_Devices_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Unit>
                __Configuration_UnitEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Unit>(
                    "Configuration_Unit",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_CanInsert,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_CanUpdate,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_CanDelete,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_CanRead,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Inserting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Inserted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Updating,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Updated,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Deleting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Deleted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Validate);
            private static bool __Configuration_Unit_CanInsert(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Unit_CanInsert(ref result);
                return result;
            }
            private static bool __Configuration_Unit_CanUpdate(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Unit_CanUpdate(ref result);
                return result;
            }
            private static bool __Configuration_Unit_CanDelete(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Unit_CanDelete(ref result);
                return result;
            }
            private static bool __Configuration_Unit_CanRead(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Unit_CanRead(ref result);
                return result;
            }
            private static void __Configuration_Unit_Inserting(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Unit e)
            {
                d.Configuration_Unit_Inserting(e);
            }
            private static void __Configuration_Unit_Inserted(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Unit e)
            {
                d.Configuration_Unit_Inserted(e);
            }
            private static void __Configuration_Unit_Updating(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Unit e)
            {
                d.Configuration_Unit_Updating(e);
            }
            private static void __Configuration_Unit_Updated(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Unit e)
            {
                d.Configuration_Unit_Updated(e);
            }
            private static void __Configuration_Unit_Deleting(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Unit e)
            {
                d.Configuration_Unit_Deleting(e);
            }
            private static void __Configuration_Unit_Deleted(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Unit e)
            {
                d.Configuration_Unit_Deleted(e);
            }
            private static void __Configuration_Unit_Validate(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Unit e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Configuration_Unit_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Zone>
                __Configuration_ZonesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Zone>(
                    "Configuration_Zones",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_CanInsert,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_CanUpdate,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_CanDelete,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_CanRead,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Inserting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Inserted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Updating,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Updated,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Deleting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Deleted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Validate);
            private static bool __Configuration_Zones_CanInsert(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Zones_CanInsert(ref result);
                return result;
            }
            private static bool __Configuration_Zones_CanUpdate(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Zones_CanUpdate(ref result);
                return result;
            }
            private static bool __Configuration_Zones_CanDelete(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Zones_CanDelete(ref result);
                return result;
            }
            private static bool __Configuration_Zones_CanRead(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d)
            {
                bool result = true;
                d.Configuration_Zones_CanRead(ref result);
                return result;
            }
            private static void __Configuration_Zones_Inserting(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Zone e)
            {
                d.Configuration_Zones_Inserting(e);
            }
            private static void __Configuration_Zones_Inserted(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Zone e)
            {
                d.Configuration_Zones_Inserted(e);
            }
            private static void __Configuration_Zones_Updating(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Zone e)
            {
                d.Configuration_Zones_Updating(e);
            }
            private static void __Configuration_Zones_Updated(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Zone e)
            {
                d.Configuration_Zones_Updated(e);
            }
            private static void __Configuration_Zones_Deleting(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Zone e)
            {
                d.Configuration_Zones_Deleting(e);
            }
            private static void __Configuration_Zones_Deleted(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Zone e)
            {
                d.Configuration_Zones_Deleted(e);
            }
            private static void __Configuration_Zones_Validate(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, global::LightSwitchApplication.Configuration_Zone e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Configuration_Zones_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService>(
                    "SaveChanges",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Device>
                __Configuration_Devices_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Device>(
                    "Configuration_Devices_Single",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Single_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Single_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Single_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Single_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_Single_PreprocessQuery);
            private static bool __Configuration_Devices_Single_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, bool r)
            {
                d.Configuration_Devices_Single_CanExecute(ref r);
                return r;
            }
            private static void __Configuration_Devices_Single_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Devices_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Configuration_Devices_Single_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Devices_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Device>)args[1]);
            }
            private static void __Configuration_Devices_Single_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args, global::System.Exception ex)
            {
                d.Configuration_Devices_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Configuration_Devices_Single_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Device> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Device>)args[1];
                d.Configuration_Devices_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Device>
                __Configuration_Devices_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Device>(
                    "Configuration_Devices_SingleOrDefault",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_SingleOrDefault_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_SingleOrDefault_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_SingleOrDefault_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_SingleOrDefault_PreprocessQuery);
            private static bool __Configuration_Devices_SingleOrDefault_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, bool r)
            {
                d.Configuration_Devices_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Configuration_Devices_SingleOrDefault_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Devices_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Configuration_Devices_SingleOrDefault_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Devices_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Device>)args[1]);
            }
            private static void __Configuration_Devices_SingleOrDefault_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args, global::System.Exception ex)
            {
                d.Configuration_Devices_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Configuration_Devices_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Device> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Device>)args[1];
                d.Configuration_Devices_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Device>
                __Configuration_Devices_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Device>(
                    "Configuration_Devices_All",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_All_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_All_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_All_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_All_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Devices_All_PreprocessQuery);
            private static bool __Configuration_Devices_All_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, bool r)
            {
                d.Configuration_Devices_All_CanExecute(ref r);
                return r;
            }
            private static void __Configuration_Devices_All_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Devices_All_Executing();
            }
            private static void __Configuration_Devices_All_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Devices_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Device>)args[0]);
            }
            private static void __Configuration_Devices_All_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args, global::System.Exception ex)
            {
                d.Configuration_Devices_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Configuration_Devices_All_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Device> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Device>)args[0];
                d.Configuration_Devices_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Unit>
                __Configuration_Unit_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Unit>(
                    "Configuration_Unit_Single",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Single_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Single_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Single_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Single_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_Single_PreprocessQuery);
            private static bool __Configuration_Unit_Single_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, bool r)
            {
                d.Configuration_Unit_Single_CanExecute(ref r);
                return r;
            }
            private static void __Configuration_Unit_Single_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Unit_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Configuration_Unit_Single_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Unit_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Unit>)args[1]);
            }
            private static void __Configuration_Unit_Single_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args, global::System.Exception ex)
            {
                d.Configuration_Unit_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Configuration_Unit_Single_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Unit> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Unit>)args[1];
                d.Configuration_Unit_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Unit>
                __Configuration_Unit_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Unit>(
                    "Configuration_Unit_SingleOrDefault",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_SingleOrDefault_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_SingleOrDefault_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_SingleOrDefault_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_SingleOrDefault_PreprocessQuery);
            private static bool __Configuration_Unit_SingleOrDefault_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, bool r)
            {
                d.Configuration_Unit_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Configuration_Unit_SingleOrDefault_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Unit_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Configuration_Unit_SingleOrDefault_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Unit_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Unit>)args[1]);
            }
            private static void __Configuration_Unit_SingleOrDefault_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args, global::System.Exception ex)
            {
                d.Configuration_Unit_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Configuration_Unit_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Unit> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Unit>)args[1];
                d.Configuration_Unit_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Unit>
                __Configuration_Unit_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Unit>(
                    "Configuration_Unit_All",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_All_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_All_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_All_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_All_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Unit_All_PreprocessQuery);
            private static bool __Configuration_Unit_All_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, bool r)
            {
                d.Configuration_Unit_All_CanExecute(ref r);
                return r;
            }
            private static void __Configuration_Unit_All_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Unit_All_Executing();
            }
            private static void __Configuration_Unit_All_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Unit_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Unit>)args[0]);
            }
            private static void __Configuration_Unit_All_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args, global::System.Exception ex)
            {
                d.Configuration_Unit_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Configuration_Unit_All_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Unit> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Unit>)args[0];
                d.Configuration_Unit_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Zone>
                __Configuration_Zones_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Zone>(
                    "Configuration_Zones_Single",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Single_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Single_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Single_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Single_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_Single_PreprocessQuery);
            private static bool __Configuration_Zones_Single_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, bool r)
            {
                d.Configuration_Zones_Single_CanExecute(ref r);
                return r;
            }
            private static void __Configuration_Zones_Single_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Zones_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Configuration_Zones_Single_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Zones_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Zone>)args[1]);
            }
            private static void __Configuration_Zones_Single_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args, global::System.Exception ex)
            {
                d.Configuration_Zones_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Configuration_Zones_Single_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Zone> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Zone>)args[1];
                d.Configuration_Zones_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Zone>
                __Configuration_Zones_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Zone>(
                    "Configuration_Zones_SingleOrDefault",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_SingleOrDefault_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_SingleOrDefault_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_SingleOrDefault_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_SingleOrDefault_PreprocessQuery);
            private static bool __Configuration_Zones_SingleOrDefault_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, bool r)
            {
                d.Configuration_Zones_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Configuration_Zones_SingleOrDefault_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Zones_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Configuration_Zones_SingleOrDefault_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Zones_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Zone>)args[1]);
            }
            private static void __Configuration_Zones_SingleOrDefault_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args, global::System.Exception ex)
            {
                d.Configuration_Zones_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Configuration_Zones_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Zone> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Zone>)args[1];
                d.Configuration_Zones_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Zone>
                __Configuration_Zones_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService, global::LightSwitchApplication.Configuration_Zone>(
                    "Configuration_Zones_All",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_All_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_All_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_All_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_All_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService.DetailsClass.__Configuration_Zones_All_PreprocessQuery);
            private static bool __Configuration_Zones_All_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, bool r)
            {
                d.Configuration_Zones_All_CanExecute(ref r);
                return r;
            }
            private static void __Configuration_Zones_All_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Zones_All_Executing();
            }
            private static void __Configuration_Zones_All_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                d.Configuration_Zones_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Configuration_Zone>)args[0]);
            }
            private static void __Configuration_Zones_All_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args, global::System.Exception ex)
            {
                d.Configuration_Zones_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Configuration_Zones_All_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ConfigurationService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Zone> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Configuration_Zone>)args[0];
                d.Configuration_Zones_All_PreprocessQuery(ref query);
                return query;
            }
    
        }
    
        #endregion
    }
    
    /// <summary>
    /// Provides members to query and update data in the lfa_PowerMgmtData_Schedule datasource.
    /// </summary>
    public sealed partial class lfa_PowerMgmtData_ScheduleService
        : global::LightSwitchApplication.lfa_PowerMgmtData_Schedule
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public lfa_PowerMgmtData_ScheduleService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Inserting(global::LightSwitchApplication.Schedule_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Inserted(global::LightSwitchApplication.Schedule_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Updating(global::LightSwitchApplication.Schedule_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Updated(global::LightSwitchApplication.Schedule_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Deleting(global::LightSwitchApplication.Schedule_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Deleted(global::LightSwitchApplication.Schedule_Device entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Validate(global::LightSwitchApplication.Schedule_Device entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Inserting(global::LightSwitchApplication.Schedule_Schedule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Inserted(global::LightSwitchApplication.Schedule_Schedule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Updating(global::LightSwitchApplication.Schedule_Schedule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Updated(global::LightSwitchApplication.Schedule_Schedule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Deleting(global::LightSwitchApplication.Schedule_Schedule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Deleted(global::LightSwitchApplication.Schedule_Schedule entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Validate(global::LightSwitchApplication.Schedule_Schedule entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Inserting(global::LightSwitchApplication.Schedule_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Inserted(global::LightSwitchApplication.Schedule_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Updating(global::LightSwitchApplication.Schedule_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Updated(global::LightSwitchApplication.Schedule_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Deleting(global::LightSwitchApplication.Schedule_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Deleted(global::LightSwitchApplication.Schedule_Unit entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Validate(global::LightSwitchApplication.Schedule_Unit entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Device> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Device> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Device> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Device> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Device> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Device> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Device_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Schedule> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Schedule> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Schedule> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Schedule> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Schedule> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Schedule> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Schedule_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Unit> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Unit> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Unit> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Unit> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Unit> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Unit> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Schedule_Unit_All_ExecuteFailed(global::System.Exception exception);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Device>
                __Schedule_DeviceEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Device>(
                    "Schedule_Device",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_CanInsert,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_CanUpdate,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_CanDelete,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_CanRead,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Inserting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Inserted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Updating,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Updated,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Deleting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Deleted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Validate);
            private static bool __Schedule_Device_CanInsert(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Device_CanInsert(ref result);
                return result;
            }
            private static bool __Schedule_Device_CanUpdate(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Device_CanUpdate(ref result);
                return result;
            }
            private static bool __Schedule_Device_CanDelete(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Device_CanDelete(ref result);
                return result;
            }
            private static bool __Schedule_Device_CanRead(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Device_CanRead(ref result);
                return result;
            }
            private static void __Schedule_Device_Inserting(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Device e)
            {
                d.Schedule_Device_Inserting(e);
            }
            private static void __Schedule_Device_Inserted(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Device e)
            {
                d.Schedule_Device_Inserted(e);
            }
            private static void __Schedule_Device_Updating(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Device e)
            {
                d.Schedule_Device_Updating(e);
            }
            private static void __Schedule_Device_Updated(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Device e)
            {
                d.Schedule_Device_Updated(e);
            }
            private static void __Schedule_Device_Deleting(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Device e)
            {
                d.Schedule_Device_Deleting(e);
            }
            private static void __Schedule_Device_Deleted(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Device e)
            {
                d.Schedule_Device_Deleted(e);
            }
            private static void __Schedule_Device_Validate(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Device e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Schedule_Device_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Schedule>
                __Schedule_ScheduleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Schedule>(
                    "Schedule_Schedule",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_CanInsert,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_CanUpdate,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_CanDelete,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_CanRead,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Inserting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Inserted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Updating,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Updated,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Deleting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Deleted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Validate);
            private static bool __Schedule_Schedule_CanInsert(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Schedule_CanInsert(ref result);
                return result;
            }
            private static bool __Schedule_Schedule_CanUpdate(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Schedule_CanUpdate(ref result);
                return result;
            }
            private static bool __Schedule_Schedule_CanDelete(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Schedule_CanDelete(ref result);
                return result;
            }
            private static bool __Schedule_Schedule_CanRead(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Schedule_CanRead(ref result);
                return result;
            }
            private static void __Schedule_Schedule_Inserting(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Schedule e)
            {
                d.Schedule_Schedule_Inserting(e);
            }
            private static void __Schedule_Schedule_Inserted(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Schedule e)
            {
                d.Schedule_Schedule_Inserted(e);
            }
            private static void __Schedule_Schedule_Updating(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Schedule e)
            {
                d.Schedule_Schedule_Updating(e);
            }
            private static void __Schedule_Schedule_Updated(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Schedule e)
            {
                d.Schedule_Schedule_Updated(e);
            }
            private static void __Schedule_Schedule_Deleting(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Schedule e)
            {
                d.Schedule_Schedule_Deleting(e);
            }
            private static void __Schedule_Schedule_Deleted(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Schedule e)
            {
                d.Schedule_Schedule_Deleted(e);
            }
            private static void __Schedule_Schedule_Validate(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Schedule e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Schedule_Schedule_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Unit>
                __Schedule_UnitEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Unit>(
                    "Schedule_Unit",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_CanInsert,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_CanUpdate,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_CanDelete,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_CanRead,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Inserting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Inserted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Updating,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Updated,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Deleting,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Deleted,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Validate);
            private static bool __Schedule_Unit_CanInsert(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Unit_CanInsert(ref result);
                return result;
            }
            private static bool __Schedule_Unit_CanUpdate(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Unit_CanUpdate(ref result);
                return result;
            }
            private static bool __Schedule_Unit_CanDelete(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Unit_CanDelete(ref result);
                return result;
            }
            private static bool __Schedule_Unit_CanRead(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d)
            {
                bool result = true;
                d.Schedule_Unit_CanRead(ref result);
                return result;
            }
            private static void __Schedule_Unit_Inserting(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Unit e)
            {
                d.Schedule_Unit_Inserting(e);
            }
            private static void __Schedule_Unit_Inserted(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Unit e)
            {
                d.Schedule_Unit_Inserted(e);
            }
            private static void __Schedule_Unit_Updating(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Unit e)
            {
                d.Schedule_Unit_Updating(e);
            }
            private static void __Schedule_Unit_Updated(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Unit e)
            {
                d.Schedule_Unit_Updated(e);
            }
            private static void __Schedule_Unit_Deleting(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Unit e)
            {
                d.Schedule_Unit_Deleting(e);
            }
            private static void __Schedule_Unit_Deleted(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Unit e)
            {
                d.Schedule_Unit_Deleted(e);
            }
            private static void __Schedule_Unit_Validate(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, global::LightSwitchApplication.Schedule_Unit e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Schedule_Unit_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService>(
                    "SaveChanges",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Device>
                __Schedule_Device_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Device>(
                    "Schedule_Device_Single",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Single_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Single_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Single_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Single_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_Single_PreprocessQuery);
            private static bool __Schedule_Device_Single_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, bool r)
            {
                d.Schedule_Device_Single_CanExecute(ref r);
                return r;
            }
            private static void __Schedule_Device_Single_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Device_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Schedule_Device_Single_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Device_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Device>)args[1]);
            }
            private static void __Schedule_Device_Single_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args, global::System.Exception ex)
            {
                d.Schedule_Device_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Schedule_Device_Single_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Device> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Device>)args[1];
                d.Schedule_Device_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Device>
                __Schedule_Device_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Device>(
                    "Schedule_Device_SingleOrDefault",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_SingleOrDefault_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_SingleOrDefault_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_SingleOrDefault_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_SingleOrDefault_PreprocessQuery);
            private static bool __Schedule_Device_SingleOrDefault_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, bool r)
            {
                d.Schedule_Device_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Schedule_Device_SingleOrDefault_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Device_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Schedule_Device_SingleOrDefault_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Device_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Device>)args[1]);
            }
            private static void __Schedule_Device_SingleOrDefault_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args, global::System.Exception ex)
            {
                d.Schedule_Device_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Schedule_Device_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Device> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Device>)args[1];
                d.Schedule_Device_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Device>
                __Schedule_Device_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Device>(
                    "Schedule_Device_All",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_All_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_All_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_All_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_All_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Device_All_PreprocessQuery);
            private static bool __Schedule_Device_All_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, bool r)
            {
                d.Schedule_Device_All_CanExecute(ref r);
                return r;
            }
            private static void __Schedule_Device_All_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Device_All_Executing();
            }
            private static void __Schedule_Device_All_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Device_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Device>)args[0]);
            }
            private static void __Schedule_Device_All_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args, global::System.Exception ex)
            {
                d.Schedule_Device_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Schedule_Device_All_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Device> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Device>)args[0];
                d.Schedule_Device_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Schedule>
                __Schedule_Schedule_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Schedule>(
                    "Schedule_Schedule_Single",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Single_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Single_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Single_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Single_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_Single_PreprocessQuery);
            private static bool __Schedule_Schedule_Single_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, bool r)
            {
                d.Schedule_Schedule_Single_CanExecute(ref r);
                return r;
            }
            private static void __Schedule_Schedule_Single_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Schedule_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Schedule_Schedule_Single_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Schedule_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Schedule>)args[1]);
            }
            private static void __Schedule_Schedule_Single_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args, global::System.Exception ex)
            {
                d.Schedule_Schedule_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Schedule_Schedule_Single_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Schedule> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Schedule>)args[1];
                d.Schedule_Schedule_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Schedule>
                __Schedule_Schedule_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Schedule>(
                    "Schedule_Schedule_SingleOrDefault",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_SingleOrDefault_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_SingleOrDefault_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_SingleOrDefault_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_SingleOrDefault_PreprocessQuery);
            private static bool __Schedule_Schedule_SingleOrDefault_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, bool r)
            {
                d.Schedule_Schedule_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Schedule_Schedule_SingleOrDefault_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Schedule_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Schedule_Schedule_SingleOrDefault_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Schedule_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Schedule>)args[1]);
            }
            private static void __Schedule_Schedule_SingleOrDefault_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args, global::System.Exception ex)
            {
                d.Schedule_Schedule_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Schedule_Schedule_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Schedule> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Schedule>)args[1];
                d.Schedule_Schedule_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Schedule>
                __Schedule_Schedule_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Schedule>(
                    "Schedule_Schedule_All",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_All_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_All_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_All_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_All_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Schedule_All_PreprocessQuery);
            private static bool __Schedule_Schedule_All_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, bool r)
            {
                d.Schedule_Schedule_All_CanExecute(ref r);
                return r;
            }
            private static void __Schedule_Schedule_All_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Schedule_All_Executing();
            }
            private static void __Schedule_Schedule_All_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Schedule_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Schedule>)args[0]);
            }
            private static void __Schedule_Schedule_All_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args, global::System.Exception ex)
            {
                d.Schedule_Schedule_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Schedule_Schedule_All_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Schedule> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Schedule>)args[0];
                d.Schedule_Schedule_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Unit>
                __Schedule_Unit_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Unit>(
                    "Schedule_Unit_Single",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Single_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Single_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Single_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Single_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_Single_PreprocessQuery);
            private static bool __Schedule_Unit_Single_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, bool r)
            {
                d.Schedule_Unit_Single_CanExecute(ref r);
                return r;
            }
            private static void __Schedule_Unit_Single_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Unit_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Schedule_Unit_Single_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Unit_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Unit>)args[1]);
            }
            private static void __Schedule_Unit_Single_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args, global::System.Exception ex)
            {
                d.Schedule_Unit_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Schedule_Unit_Single_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Unit> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Unit>)args[1];
                d.Schedule_Unit_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Unit>
                __Schedule_Unit_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Unit>(
                    "Schedule_Unit_SingleOrDefault",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_SingleOrDefault_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_SingleOrDefault_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_SingleOrDefault_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_SingleOrDefault_PreprocessQuery);
            private static bool __Schedule_Unit_SingleOrDefault_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, bool r)
            {
                d.Schedule_Unit_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Schedule_Unit_SingleOrDefault_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Unit_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Schedule_Unit_SingleOrDefault_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Unit_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Unit>)args[1]);
            }
            private static void __Schedule_Unit_SingleOrDefault_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args, global::System.Exception ex)
            {
                d.Schedule_Unit_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Schedule_Unit_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Unit> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Unit>)args[1];
                d.Schedule_Unit_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Unit>
                __Schedule_Unit_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService, global::LightSwitchApplication.Schedule_Unit>(
                    "Schedule_Unit_All",
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_All_CanExecute,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_All_Executing,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_All_Executed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_All_Failed,
                    global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService.DetailsClass.__Schedule_Unit_All_PreprocessQuery);
            private static bool __Schedule_Unit_All_CanExecute(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, bool r)
            {
                d.Schedule_Unit_All_CanExecute(ref r);
                return r;
            }
            private static void __Schedule_Unit_All_Executing(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Unit_All_Executing();
            }
            private static void __Schedule_Unit_All_Executed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                d.Schedule_Unit_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Schedule_Unit>)args[0]);
            }
            private static void __Schedule_Unit_All_Failed(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args, global::System.Exception ex)
            {
                d.Schedule_Unit_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Schedule_Unit_All_PreprocessQuery(global::LightSwitchApplication.lfa_PowerMgmtData_ScheduleService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Unit> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Schedule_Unit>)args[0];
                d.Schedule_Unit_All_PreprocessQuery(ref query);
                return query;
            }
    
        }
    
        #endregion
    }
    
    #endregion
}
